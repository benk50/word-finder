cmdhistory=[";; Switching to ast-dojo.core namespace" "{a\: 1}" "{\:a 1}" ";; Switching to ast-dojo.core namespace" "(let [[first-char second-char & rest-chars] \\"nigel\\"])" "(defn blah [word] (let [[first-char second-char & rest-chars] word]) pr first-char)" "(defn blah [word] (let [[first-char second-char & rest-chars] word] pr first-char))" "(blah \\"nigel\\")" "(defn blah [word] (let [[& rest-chars] word] pr rest-chars))" "(blah \\"nigel\\")" "(nth (blah \\"nigel\\" 4))" "(nth (blah \\"nigel\\") 4)" "(nth (blah \\"nigel\\") 6)" "(substring? \\"gel\\" \\"nigel\\")" "(\:use [clojure.contrib.def])" "(\:use [clojure.contrib])" "(require (clojure contrib))" "(require '(clojure contrib))" ";; Switching to ast-dojo.core namespace" "(substring? \\"n\\" \\"nigel\\")" ";; Switching to ast-dojo.core namespace" "(substring? \\"nig\\" \\"nigel\\")" "(let [a-char \\"n\\"] (filter (fn [x] (substring? a-char x)) \\"nigel\\"))" "(let [a-char \\"ni\\"] (filter (fn [x] (substring? a-char x)) \\"nigel\\"))" "(let [a-char \\"ni\\"] (pr a-char))" "(let [a-char \\"ni\\"] (filter (fn [x] (substring? a-char x)) [\\"nigel\\", \\"sam\\"]))" ";; Switching to ast-dojo.core namespace" "(find-words \\"abbott\\")" "(filter-words \\"tiugaiv\\" \\"v\\")" "(filter-words \\"tiugaiv\\" \\"y\\")" "(filter-words \\"tiugai\\" \\"y\\")" "(filter-words \\"tiugai\\" \\"r\\")"]
eclipse.preferences.version=1
